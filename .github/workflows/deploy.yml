name: Deploy Backend Services (dev)

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Select service to deploy'
        required: true
        type: choice
        options:
          - api
          - contract-listener

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  deploy-api:
    if: github.event.inputs.service == 'api'
    runs-on: ubuntu-latest
    environment: api.development
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v3
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push API image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: '${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com'
#           ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY_API }}
#           IMAGE_TAG: latest
#         run: |
#           DOCKER_BUILDKIT=1 docker build \
#               --target api-dev \
#               -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
#               -f Dockerfile . \
#               --build-arg APP_ENV=${{ secrets.APP_ENV }} \
#               --build-arg PORT=${{ secrets.PORT }} \
#               --build-arg AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }} \
#               --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
#               --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
#               --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
#               --build-arg SM_DB_SECRET_NAME=${{ secrets.SM_DB_SECRET_NAME }} \
#               --build-arg SM_APP_SECRET_NAME=${{ secrets.SM_APP_SECRET_NAME }} \
#               --build-arg SM_BUCKET_SECRET_NAME=${{ secrets.SM_BUCKET_SECRET_NAME }}
              
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#       - name: Trigger API Deployment on ECS
#         id: trigger-deployment
#         run: |
#           aws ecs update-service --cluster ${{ secrets.AWS_CLUSTER_NAME_API }} \
#           --service ${{ secrets.AWS_CLUSTER_SERVICE_NAME_API }} \
#           --force-new-deployment --region ${{ secrets.AWS_REGION }}

#   deploy-contract-listener:
#     if: github.event.inputs.service == 'contract-listener'
#     runs-on: ubuntu-latest
#     environment: contractlistener.development
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v3
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push Contract Listener image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: '${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com'
#           ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY_CONTRACT_LISTENER }}
#           IMAGE_TAG: latest
#         run: |
#           DOCKER_BUILDKIT=1 docker build \
#               --target contractlistener-dev \
#               -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
#               -f Dockerfile . \
#               --build-arg APP_ENV=${{ secrets.APP_ENV }} \
#               --build-arg PORT=${{ secrets.PORT }} \
#               --build-arg NODE_ENV=${{ secrets.NODE_ENV }} \
#               --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
#               --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
#               --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
#               --build-arg SM_DB_SECRET_NAME=${{ secrets.SM_DB_SECRET_NAME }} \
#               --build-arg SM_APP_SECRET_NAME=${{ secrets.SM_APP_SECRET_NAME }} \
#               --build-arg SM_BUCKET_SECRET_NAME=${{ secrets.SM_BUCKET_SECRET_NAME }}
              
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#       - name: Trigger Contract Listener Deployment on ECS
#         id: trigger-deployment
#         run: |
#           aws ecs update-service --cluster ${{ secrets.AWS_CLUSTER_NAME_CONTRACT_LISTENER }} \
#           --service ${{ secrets.AWS_CLUSTER_SERVICE_NAME_CONTRACT_LISTENER }} \
#           --force-new-deployment --region ${{ secrets.AWS_REGION }}
